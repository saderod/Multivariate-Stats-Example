import pandas as pd
import statistics
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import linear_model
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import pylab
import statsmodels.api as sm
from scipy import stats
import math
from statsmodels.stats import diagnostic
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error

data = pd.read_excel("300 Flights 2008.xlsx")
data

data.describe().to_excel("data described.xlsx")

statistics.pvariance(data["Ave. Fare 4th Qtr"])

statistics.pvariance(data["Distance"])

statistics.pvariance(data["Ave. Wk. Pass."])

statistics.pvariance(data["Market Share"])

statistics.pvariance(data["Average Fare 2008"])

data["Ave. Fare 4th Qtr"].hist()

data["Distance"].hist()

data["Ave. Wk. Pass."].hist()

data["Market Share"].hist()

data["Average Fare 2008"].hist()

data.corr().to_excel("data corr.xlsx")

plt.figure(figsize=(8,8))
sns.heatmap(data.corr(), annot=True, cmap="coolwarm")

pd.plotting.scatter_matrix(data, alpha=1, figsize=(30,20))

X = data[["Distance", "Ave. Wk. Pass.", "Market Share", "Average Fare 2008"]]
Y = data["Ave. Fare 4th Qtr"]

X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state = 1)

regression_model = LinearRegression()

regression_model.fit(X_train, y_train)

intercept = regression_model.intercept_
coef = regression_model.coef_

intercept

list(X.columns)

list(coef)

y_predict = regression_model.predict(X_test)

list(y_predict)


# define our intput
X2 = sm.add_constant(X)

# create a OLS model
model = sm.OLS(Y, X2)

# fit the data
est = model.fit()

sm.qqplot(est.resid, line='s')
pylab.show()

mean_residuals = sum(est.resid) / len(est.resid)
mean_residuals

regression_model.score(X_test, y_test)
